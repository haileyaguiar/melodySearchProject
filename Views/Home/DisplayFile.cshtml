@{

}

<!-- Add the back button -->
@* <div style="margin-top: 20px;">
    <button onclick="history.back()" class="btn btn-secondary">Back</button>
</div>
<br /> *@

<!-- Add the Previous and Next buttons -->
<div style="margin-top: 20px;">

    @if (ViewBag.HasPrevious)
    {
        <a href="@Url.Action("DisplayFile", new { id = ViewBag.PreviousId, index = ViewBag.CurrentIndex - 1 })" class="btn btn-secondary">Previous</a>
    }

    @if (ViewBag.HasNext)
    {
        <a href="@Url.Action("DisplayFile", new { id = ViewBag.NextId, index = ViewBag.CurrentIndex + 1 })" class="btn btn-secondary">Next</a>
    }
</div>
<br />

<!-- Metadata table -->
<table class="table table-bordered" id="metadata-table">
    <thead>
        <tr>
            <th>Field</th>
            <th>Value</th>
        </tr>
    </thead>
    <tbody>
        <!-- Metadata rows will be added here via JavaScript -->
    </tbody>
</table>
<br />
<h4>@ViewBag.FileName</h4>
<br />

<!-- Add a download button -->
<div>
    <a href="@Url.Action("DownloadFile", "Home", new { fileName = ViewBag.FileName })"
       class="btn"
       style="width: 10%; padding: 10px; background-color: deeppink; color: white; border: none; text-align: center; cursor: pointer; display: inline-block;">
        Download MEI File
    </a>
</div>
<br />
<p>MIDI player: </p>
<!-- MIDI Playback and stop Button -->
<midi-player id="midi-player" sound-font visualizer="#myVisualizer"></midi-player>

<!-- Fixed-size container for the notation rendering -->
<div id="notation-container" style="max-width: 1800px; max-height: 1400px; border: 2px solid #ccc; margin: 20px auto; display: flex; justify-content: center; align-items: center; overflow: auto;">
    <div id="notation" style="width: 1800px; height: 1400px;"></div> <!-- Fixed dimensions for SVG -->
</div>

<!-- Store the MEI content in a hidden textarea -->
<textarea id="mei-data" style="display:none;">@Html.Raw(ViewBag.FileContent)</textarea>

<!-- Verovio and rendering the MEI content -->
<script src="https://www.verovio.org/javascript/latest/verovio-toolkit.js"></script>

<!-- Include the MIDI.js library -->
<script src="https://cdn.jsdelivr.net/combine/npm/tone@14.7.58,npm/@@magenta/music@1.23.1/es6/core.js,npm/focus-visible@5,npm/html-midi-player@1.5.0"></script>


<script>
    // Function to extract content between MEI tags and handle attributes, returning all values concatenated
    function extractMetadataTag(meiDoc, tagName, attributeName = null, attributeValue = null, excludeType = null) {
        var tags = meiDoc.getElementsByTagName(tagName);
        var results = [];

        // Loop through all tags matching the tagName
        for (var i = 0; i < tags.length; i++) {
            var tag = tags[i];

            // If excludeType is provided, ignore tags with this attribute value
            if (excludeType && tag.getAttribute("type") === excludeType) {
                continue;  // Skip this tag if it matches the excluded type
            }

            // If attributeName and attributeValue are provided, check them
            if (attributeName && attributeValue) {
                if (tag.getAttribute(attributeName) === attributeValue) {
                    results.push(tag.textContent.trim());  // Collect text if attribute matches
                }
            } else {
                results.push(tag.textContent.trim());  // Collect text if no attribute filtering is needed
            }
        }

        // Join all collected values with a newline for better readability
        return results.length > 0 ? results.join('\n') : null;
    }

    // Function to render notation using Verovio
    function renderNotation() {
        var meiContent = document.getElementById('mei-data').value.trim();
        var vrvToolkit = new verovio.toolkit();

        // Get the container (notation div)
        var notationContainer = document.getElementById('notation');

        var svgWidth = 1800; // Increase the width for a larger PNG
        var svgHeight = 1400; // Increase the height for a larger PNG

        var options = {
            pageWidth: svgWidth, // Use increased width
            scale: 50,            // Increase the scale to make the notation bigger
            pageHeight: svgHeight // Use increased height
        };

        // Load MEI content into the toolkit
        vrvToolkit.loadData(meiContent);
        var svgString = vrvToolkit.renderToSVG(1, options);

        // Parse the SVG string into an SVG element
        var parser = new DOMParser();
        var svgDoc = parser.parseFromString(svgString, "image/svg+xml");
        var svgElement = svgDoc.documentElement;

        // Set the SVG style to fixed dimensions
        svgElement.style.width = svgWidth + "px";
        svgElement.style.height = svgHeight + "px";

        // Clear the innerHTML of the notation container before appending new SVG
        notationContainer.innerHTML = '';
        notationContainer.appendChild(svgElement); // Append the SVG element
    }

    // Function to generate and play the MIDI from MEI content
    function playMIDI() {
        var meiContent = document.getElementById('mei-data').value.trim();
        var vrvToolkit = new verovio.toolkit();
        vrvToolkit.loadData(meiContent);

        // Generate the MIDI data from MEI content
        var midiData = vrvToolkit.renderToMIDI();

        // Convert the MIDI data to a base64 data URI
        let midiString = 'data:audio/midi;base64,' + midiData;

        // Set the source of the midi-player to the generated MIDI data URI
        var midiPlayer = document.getElementById('midi-player');
        midiPlayer.setAttribute('src', midiString);
    }




    function processMetadata() {
        var meiContent = document.getElementById('mei-data').value.trim();
        var parser = new DOMParser();
        var meiDoc = parser.parseFromString(meiContent, "application/xml");

        // Extract metadata with consideration for attributes and exclude certain types
        var metadata = {
            "Title(s)": extractMetadataTag(meiDoc, "title", null, null, "collection"),  // Exclude collection titles
            "Clé du caveau Number": extractMetadataTag(meiDoc, "notes", "type", "CdC Number"),
            "RISM ID": extractMetadataTag(meiDoc, "idno", "type", "RISM"),
            "Composer": extractMetadataTag(meiDoc, "composer"),
            "Arranger": extractMetadataTag(meiDoc, "arranger"),
            "Librettist": extractMetadataTag(meiDoc, "librettist"),
            "Original Musical Source": extractMetadataTag(meiDoc, "notes", "type", "musical source"), //Exclude CdC Number
            "Text Incipit(s)": extractMetadataTag(meiDoc, "inciptText"),
            "Source Type": extractMetadataTag(meiDoc, "media"),
            "Manuscript Library Location": extractMetadataTag(meiDoc, "library"),
            "Manuscript Classmark": extractMetadataTag(meiDoc, "classmark"),
            "Collection Title": extractMetadataTag(meiDoc, "title", "type", "collection"),
            "Collection Number": extractMetadataTag(meiDoc, "collection", "type", "number"),
            "Collection Editor": extractMetadataTag(meiDoc, "editor", "type", "collection"),
            "Series Title": extractMetadataTag(meiDoc, "title", "type", "series"),
            "Series Number": extractMetadataTag(meiDoc, "number", "type", "series"),
            "Series Editor": extractMetadataTag(meiDoc, "editor", "type", "series"),
            "Place of Publication": extractMetadataTag(meiDoc, "pubPlace"),
            "Publisher": extractMetadataTag(meiDoc, "publisher"),
            "Publication Date": extractMetadataTag(meiDoc, "date", "type", "publication"),
            "Edition": extractMetadataTag(meiDoc, "edition"),
            "Publisher Plate Number": extractMetadataTag(meiDoc, "plateNum"),
            "CdC tableau": extractMetadataTag(meiDoc, "notes", "type", "CdC tableau"),
            "CdC tableau division": extractMetadataTag(meiDoc, "notes", "type", "CdC tableau division"),
            "Musette division": extractMetadataTag(meiDoc, "notes", "type", "Musette division"),
            "Poetic Form": extractMetadataTag(meiDoc, "notes", "type", "poetic form"),
            "Poetic Form Associated Title": extractMetadataTag(meiDoc, "notes", "type", "poetic form associated title"),
            "Specific Rhyme Pattern": extractMetadataTag(meiDoc, "notes", "type", "specific rhyme pattern"),
            "Musical Form": extractMetadataTag(meiDoc, "notes", "type", "musical form"),
            "Title by Musical Form": extractMetadataTag(meiDoc, "title", "type", "musical form"),
            "Encoding Date": extractMetadataTag(meiDoc, "date", "type", "encoding-date"),
        };

        displayMetadata(metadata);
    }

    // Function to display metadata in the table
    function displayMetadata(metadata) {
        var metadataTable = document.getElementById("metadata-table").getElementsByTagName("tbody")[0];
        metadataTable.innerHTML = "";  // Clear existing rows

        // Iterate over metadata and add rows to the table
        for (var field in metadata) {
            if (metadata[field]) {
                var row = metadataTable.insertRow();
                var cell1 = row.insertCell(0);
                var cell2 = row.insertCell(1);
                cell1.innerHTML = field;

                // Split metadata values by newline and wrap them in <div> for better control
                var values = metadata[field].split('\n').map(value => `<div class="metadata-line">${value}</div>`).join('');
                cell2.innerHTML = values;
            }
        }
    }


    // Add event listener to the Play MIDI button
    window.onload = function () {
        playMIDI(); // Trigger the MIDI playback automatically when the page loads
    };


    // Initial rendering of the notation
    processMetadata();
    renderNotation();
    


    // Resize the frame when the window is resized
    window.addEventListener('resize', function () {
        var container = document.getElementById('notation-container');
        container.style.width = Math.min(window.innerWidth * 0.9, 1800) + "px"; // Set to 90% of window width, max 1000px
        container.style.height = Math.min(window.innerHeight * 0.9, 1400) + "px"; // Set to 90% of window height, max 800px
    });
</script>
