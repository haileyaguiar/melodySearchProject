@{

}

<!-- Add the back button -->
<div style="margin-top: 20px;">
    <button onclick="history.back()" class="btn btn-secondary">Back</button>
</div>

<h2>@ViewBag.FileName</h2>

<!-- Metadata table -->
<h3>Metadata</h3>
<table class="table table-bordered" id="metadata-table">
    <thead>
        <tr>
            <th>Field</th>
            <th>Value</th>
        </tr>
    </thead>
    <tbody>
        <!-- Metadata rows will be added here via JavaScript -->
    </tbody>
</table>

<!-- Add a download button -->
<div>
    <a href="@Url.Action("DownloadFile", "Home", new { fileName = ViewBag.FileName })" class="btn btn-primary">Download MEI File</a>
</div>

<!-- Render the notation -->
<div id="notation"></div>

<!-- Store the MEI content in a hidden textarea -->
<textarea id="mei-data" style="display:none;">@Html.Raw(ViewBag.FileContent)</textarea>

<!-- Verovio and rendering the MEI content -->
<script src="https://www.verovio.org/javascript/latest/verovio-toolkit.js"></script>

<script>
    // Function to extract content between MEI tags and handle attributes, returning all values concatenated
    function extractMetadataTag(meiDoc, tagName, attributeName = null, attributeValue = null, excludeType = null) {
        var tags = meiDoc.getElementsByTagName(tagName);
        var results = [];

        // Loop through all tags matching the tagName
        for (var i = 0; i < tags.length; i++) {
            var tag = tags[i];

            // If excludeType is provided, ignore tags with this attribute value
            if (excludeType && tag.getAttribute("type") === excludeType) {
                continue;  // Skip this tag if it matches the excluded type
            }

            // If attributeName and attributeValue are provided, check them
            if (attributeName && attributeValue) {
                if (tag.getAttribute(attributeName) === attributeValue) {
                    results.push(tag.textContent.trim());  // Collect text if attribute matches
                }
            } else {
                results.push(tag.textContent.trim());  // Collect text if no attribute filtering is needed
            }
        }

        // Join all collected values with a newline for better readability
        return results.length > 0 ? results.join('\n') : null;
    }

    function renderNotation() {
        var meiContent = document.getElementById('mei-data').value.trim();
        var vrvToolkit = new verovio.toolkit();

        // Get the container (notation div)
        var notationContainer = document.getElementById('notation');

        // Get the dimensions of the container
        var containerWidth = notationContainer.clientWidth * 0.9; // 90% of the container's width
        var containerHeight = notationContainer.clientHeight * 0.9; // 90% of the container's height

        var options = {
            pageWidth: containerWidth, // Use 90% of the container's width
            scale: 5,                  // Smaller scale value to make notation more compact
            pageHeight: containerHeight  // Use 90% of the container's height
        };

        // Load MEI content into the toolkit
        vrvToolkit.loadData(meiContent);
        var svgString = vrvToolkit.renderToSVG(1, options);

        // Parse the SVG string into an SVG element
        var parser = new DOMParser();
        var svgDoc = parser.parseFromString(svgString, "image/svg+xml");
        var svgElement = svgDoc.documentElement;

        // Set viewBox attribute based on the dimensions of the SVG
        var width = svgElement.getAttribute('width').replace('px', '');
        var height = svgElement.getAttribute('height').replace('px', '');
        svgElement.setAttribute('viewBox', `0 0 ${width} ${height}`);

        // Set the SVG style to fill the container
        svgElement.style.width = "100%";
        svgElement.style.height = "100%";

        // Clear the innerHTML of the notation container before appending new SVG
        notationContainer.innerHTML = '';
        notationContainer.appendChild(svgElement); // Append the SVG element
    }

    function processMetadata() {
        var meiContent = document.getElementById('mei-data').value.trim();
        var parser = new DOMParser();
        var meiDoc = parser.parseFromString(meiContent, "application/xml");

        // Extract metadata with consideration for attributes and exclude certain types
        var metadata = {
            "Title(s)": extractMetadataTag(meiDoc, "title", null, null, "collection"),  // Exclude collection titles
            "Text Incipit(s)": extractMetadataTag(meiDoc, "incipText"),
            "Composer": extractMetadataTag(meiDoc, "composer"),
            "Librettist": extractMetadataTag(meiDoc, "librettist"),
            "Collection Editor": extractMetadataTag(meiDoc, "editor", "type", "collection"),
            "Encoding Date": extractMetadataTag(meiDoc, "date", "type", "encoding-date"),
            "Musical Source": extractMetadataTag(meiDoc, "notes", null, null, "CdC Number"), //Exclude CdC Number
            "Collection Title": extractMetadataTag(meiDoc, "title", "type", "collection"),
            "Collection Number": extractMetadataTag(meiDoc, "collection", "type", "number"),
            "Clé du caveau Number": extractMetadataTag(meiDoc, "notes", "type", "CdC Number"),
            "Publisher": extractMetadataTag(meiDoc, "publisher"),
            "Place of Publication": extractMetadataTag(meiDoc, "pubPlace"),
            "Publication Date": extractMetadataTag(meiDoc, "date", "type", "publication"),
            "Edition": extractMetadataTag(meiDoc, "edition"),
            "Source Type": extractMetadataTag(meiDoc, "sourceType"),
            "Series Title": extractMetadataTag(meiDoc, "title", "type", "series"),
            "Series Editor": extractMetadataTag(meiDoc, "editor", "type", "series"),
            "Publisher Plate Number": extractMetadataTag(meiDoc, "publisherPlateNumber"),
            "Manuscript Library Location": extractMetadataTag(meiDoc, "manuscriptLibraryLocation"),
            "Manuscript Library Call Number": extractMetadataTag(meiDoc, "manuscriptLibraryCallNumber"),
            "RISM ID": extractMetadataTag(meiDoc, "rismId"),
        };

        displayMetadata(metadata);
    }

    // Function to display metadata in the table
    function displayMetadata(metadata) {
        var metadataTable = document.getElementById("metadata-table").getElementsByTagName("tbody")[0];
        metadataTable.innerHTML = "";  // Clear existing rows

        // Iterate over metadata and add rows to the table
        for (var field in metadata) {
            if (metadata[field]) {
                var row = metadataTable.insertRow();
                var cell1 = row.insertCell(0);
                var cell2 = row.insertCell(1);
                cell1.innerHTML = field;

                // Replace newline characters with <br> for proper HTML rendering
                cell2.innerHTML = metadata[field].replace(/\n/g, '<br>');
            }
        }
    }

    // Initial rendering
    renderNotation();
    processMetadata(); // Call processMetadata after rendering

    // Redraw the notation when the window is resized
    window.addEventListener('resize', renderNotation);
</script>


